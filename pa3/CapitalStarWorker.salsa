module pa3;

import java.util.Arrays;

behavior CapitalStarWorker
{
	Star stars[];
	Double x, y, z;
	Double dist;
	int workerNum = 0;
	int range = 0;
	int overflow = 0;

	CapitalStarWorker(Star _stars[], int _range, int _workerNum, int _overflow)
	{
		stars = _stars;
		setDist(stars[0].getAvgDist());
		setCoord(stars[0].getCoord());
		range = _range;
		workerNum = _workerNum;
		overflow = _overflow;
	}

	void setDist(Double _dist)
	{
		dist = _dist;
	}

	void setCoord(Double coord[])
	{
		x = coord[0];
		y = coord[1];
		z = coord[2];
	}

	int findBest(Double distances[])
	{
		int index = -1;
		for(int i = 0; i < distances.length; i++)
		{
			//standardOutput <- println("Checking dist: " + (Double)arr[i]);
			if(distances[i] < dist)
			{
				dist = distances[i];
				index = i;
			}
		}

		return index;
	}

	int updateIdeal(int index, int beginning)
	{
		if(index != -1)
		{
			setCoord(stars[beginning+index].getCoord());
			setDist(stars[beginning+index].getAvgDist());
		}

		return 1;		
	}

	int check()
	{
		int beginning = range * workerNum;
		int ending = beginning+range+overflow;

		//standardOutput<-println("beginning: " + beginning + " / ending: " + ending);
		Double distances[] = new Double[range+overflow];	
		int count = 0;
		for(int i = beginning; i < ending; i++)
		{
			//standardOutput<-println("workerNum: " + workerNum + " - " + i);
			distances[count] = stars[i].getAvgDist();
			count++;
		}
		findBest(distances)@updateIdeal(token, beginning)@currentContinuation;
		
	}

	Double getDist()
	{
		return dist;
	}

	Double[] getCoord()
	{
		Double coord[] = new Double[3];
		coord[0] = x;
		coord[1] = y;
		coord[2] = z;
		return coord;
	}
}